// Generated by data binding compiler. Do not edit!
package com.sunmnet.mediaroom.tabsp.databinding;

import android.databinding.Bindable;
import android.databinding.DataBindingUtil;
import android.databinding.ViewDataBinding;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Switch;
import android.widget.TextView;
import com.sunmnet.mediaroom.device.bean.AbstractDevice;
import com.sunmnet.mediaroom.tabsp.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class DisplayItem extends ViewDataBinding {
  @NonNull
  public final TextView controllName;

  @NonNull
  public final ProgressBar controllProcessing;

  @NonNull
  public final Switch controllSwitcher;

  @Bindable
  protected AbstractDevice mDevice;

  protected DisplayItem(Object _bindingComponent, View _root, int _localFieldCount,
      TextView controllName, ProgressBar controllProcessing, Switch controllSwitcher) {
    super(_bindingComponent, _root, _localFieldCount);
    this.controllName = controllName;
    this.controllProcessing = controllProcessing;
    this.controllSwitcher = controllSwitcher;
  }

  public abstract void setDevice(@Nullable AbstractDevice device);

  @Nullable
  public AbstractDevice getDevice() {
    return mDevice;
  }

  @NonNull
  public static DisplayItem inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.tabsp_version2_display_item, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static DisplayItem inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<DisplayItem>inflateInternal(inflater, R.layout.tabsp_version2_display_item, root, attachToRoot, component);
  }

  @NonNull
  public static DisplayItem inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.tabsp_version2_display_item, null, false, component)
   */
  @NonNull
  @Deprecated
  public static DisplayItem inflate(@NonNull LayoutInflater inflater, @Nullable Object component) {
    return ViewDataBinding.<DisplayItem>inflateInternal(inflater, R.layout.tabsp_version2_display_item, null, false, component);
  }

  public static DisplayItem bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static DisplayItem bind(@NonNull View view, @Nullable Object component) {
    return (DisplayItem)bind(component, view, R.layout.tabsp_version2_display_item);
  }
}
