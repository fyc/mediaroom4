package com.sunmnet.mediaroom.brand.data.database.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sunmnet.mediaroom.brand.data.database.face.UserInfo;

import com.sunmnet.mediaroom.brand.data.database.face.FaceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_INFO".
*/
public class FaceInfoDao extends AbstractDao<FaceInfo, String> {

    public static final String TABLENAME = "FACE_INFO";

    /**
     * Properties of entity FaceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FaceId = new Property(0, String.class, "faceId", true, "FACE_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
    }

    private DaoSession daoSession;

    private Query<FaceInfo> userInfo_FaceInfoListQuery;

    public FaceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FaceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_INFO\" (" + //
                "\"FACE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: faceId
                "\"ID\" TEXT);"); // 1: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(1, faceId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(1, faceId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
    }

    @Override
    protected final void attachEntity(FaceInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FaceInfo readEntity(Cursor cursor, int offset) {
        FaceInfo entity = new FaceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // faceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaceInfo entity, int offset) {
        entity.setFaceId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FaceInfo entity, long rowId) {
        return entity.getFaceId();
    }
    
    @Override
    public String getKey(FaceInfo entity) {
        if(entity != null) {
            return entity.getFaceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FaceInfo entity) {
        return entity.getFaceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "faceInfoList" to-many relationship of UserInfo. */
    public List<FaceInfo> _queryUserInfo_FaceInfoList(String id) {
        synchronized (this) {
            if (userInfo_FaceInfoListQuery == null) {
                QueryBuilder<FaceInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                userInfo_FaceInfoListQuery = queryBuilder.build();
            }
        }
        Query<FaceInfo> query = userInfo_FaceInfoListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserInfoDao().getAllColumns());
            builder.append(" FROM FACE_INFO T");
            builder.append(" LEFT JOIN USER_INFO T0 ON T.\"ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FaceInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        FaceInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserInfo userInfo = loadCurrentOther(daoSession.getUserInfoDao(), cursor, offset);
        entity.setUserInfo(userInfo);

        return entity;    
    }

    public FaceInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FaceInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FaceInfo> list = new ArrayList<FaceInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FaceInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FaceInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
