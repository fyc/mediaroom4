package com.sunmnet.mediaroom.brand.data.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunmnet.mediaroom.brand.data.database.play.NotificationContentPropertyConverter;
import java.util.List;

import com.sunmnet.mediaroom.brand.data.database.play.NotificationRuleDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION_RULE_DBENTITY".
*/
public class NotificationRuleDBEntityDao extends AbstractDao<NotificationRuleDBEntity, String> {

    public static final String TABLENAME = "NOTIFICATION_RULE_DBENTITY";

    /**
     * Properties of entity NotificationRuleDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property TimeType = new Property(2, int.class, "timeType", false, "TIME_TYPE");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Week = new Property(5, String.class, "week", false, "WEEK");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property PlayType = new Property(7, int.class, "playType", false, "PLAY_TYPE");
        public final static Property PlayStatus = new Property(8, int.class, "playStatus", false, "PLAY_STATUS");
        public final static Property CleanOld = new Property(9, boolean.class, "cleanOld", false, "CLEAN_OLD");
        public final static Property Color = new Property(10, String.class, "color", false, "COLOR");
        public final static Property Background = new Property(11, String.class, "background", false, "BACKGROUND");
        public final static Property Underline = new Property(12, boolean.class, "underline", false, "UNDERLINE");
        public final static Property Italic = new Property(13, boolean.class, "italic", false, "ITALIC");
        public final static Property Bold = new Property(14, boolean.class, "bold", false, "BOLD");
        public final static Property Size = new Property(15, int.class, "size", false, "SIZE");
        public final static Property Alignment = new Property(16, int.class, "alignment", false, "ALIGNMENT");
        public final static Property Font = new Property(17, String.class, "font", false, "FONT");
        public final static Property Gravity = new Property(18, String.class, "gravity", false, "GRAVITY");
        public final static Property RollDirection = new Property(19, String.class, "rollDirection", false, "ROLL_DIRECTION");
        public final static Property Contents = new Property(20, String.class, "contents", false, "CONTENTS");
    }

    private final NotificationContentPropertyConverter contentsConverter = new NotificationContentPropertyConverter();

    public NotificationRuleDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationRuleDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION_RULE_DBENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TIME_TYPE\" INTEGER NOT NULL ," + // 2: timeType
                "\"DATE\" TEXT," + // 3: date
                "\"TIME\" TEXT," + // 4: time
                "\"WEEK\" TEXT," + // 5: week
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"PLAY_TYPE\" INTEGER NOT NULL ," + // 7: playType
                "\"PLAY_STATUS\" INTEGER NOT NULL ," + // 8: playStatus
                "\"CLEAN_OLD\" INTEGER NOT NULL ," + // 9: cleanOld
                "\"COLOR\" TEXT," + // 10: color
                "\"BACKGROUND\" TEXT," + // 11: background
                "\"UNDERLINE\" INTEGER NOT NULL ," + // 12: underline
                "\"ITALIC\" INTEGER NOT NULL ," + // 13: italic
                "\"BOLD\" INTEGER NOT NULL ," + // 14: bold
                "\"SIZE\" INTEGER NOT NULL ," + // 15: size
                "\"ALIGNMENT\" INTEGER NOT NULL ," + // 16: alignment
                "\"FONT\" TEXT," + // 17: font
                "\"GRAVITY\" TEXT," + // 18: gravity
                "\"ROLL_DIRECTION\" TEXT," + // 19: rollDirection
                "\"CONTENTS\" TEXT);"); // 20: contents
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION_RULE_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotificationRuleDBEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTimeType());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(6, week);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getPlayType());
        stmt.bindLong(9, entity.getPlayStatus());
        stmt.bindLong(10, entity.getCleanOld() ? 1L: 0L);
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(11, color);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(12, background);
        }
        stmt.bindLong(13, entity.getUnderline() ? 1L: 0L);
        stmt.bindLong(14, entity.getItalic() ? 1L: 0L);
        stmt.bindLong(15, entity.getBold() ? 1L: 0L);
        stmt.bindLong(16, entity.getSize());
        stmt.bindLong(17, entity.getAlignment());
 
        String font = entity.getFont();
        if (font != null) {
            stmt.bindString(18, font);
        }
 
        String gravity = entity.getGravity();
        if (gravity != null) {
            stmt.bindString(19, gravity);
        }
 
        String rollDirection = entity.getRollDirection();
        if (rollDirection != null) {
            stmt.bindString(20, rollDirection);
        }
 
        List contents = entity.getContents();
        if (contents != null) {
            stmt.bindString(21, contentsConverter.convertToDatabaseValue(contents));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotificationRuleDBEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTimeType());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(6, week);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getPlayType());
        stmt.bindLong(9, entity.getPlayStatus());
        stmt.bindLong(10, entity.getCleanOld() ? 1L: 0L);
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(11, color);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(12, background);
        }
        stmt.bindLong(13, entity.getUnderline() ? 1L: 0L);
        stmt.bindLong(14, entity.getItalic() ? 1L: 0L);
        stmt.bindLong(15, entity.getBold() ? 1L: 0L);
        stmt.bindLong(16, entity.getSize());
        stmt.bindLong(17, entity.getAlignment());
 
        String font = entity.getFont();
        if (font != null) {
            stmt.bindString(18, font);
        }
 
        String gravity = entity.getGravity();
        if (gravity != null) {
            stmt.bindString(19, gravity);
        }
 
        String rollDirection = entity.getRollDirection();
        if (rollDirection != null) {
            stmt.bindString(20, rollDirection);
        }
 
        List contents = entity.getContents();
        if (contents != null) {
            stmt.bindString(21, contentsConverter.convertToDatabaseValue(contents));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NotificationRuleDBEntity readEntity(Cursor cursor, int offset) {
        NotificationRuleDBEntity entity = new NotificationRuleDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // timeType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // week
            cursor.getInt(offset + 6), // type
            cursor.getInt(offset + 7), // playType
            cursor.getInt(offset + 8), // playStatus
            cursor.getShort(offset + 9) != 0, // cleanOld
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // color
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // background
            cursor.getShort(offset + 12) != 0, // underline
            cursor.getShort(offset + 13) != 0, // italic
            cursor.getShort(offset + 14) != 0, // bold
            cursor.getInt(offset + 15), // size
            cursor.getInt(offset + 16), // alignment
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // font
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // gravity
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // rollDirection
            cursor.isNull(offset + 20) ? null : contentsConverter.convertToEntityProperty(cursor.getString(offset + 20)) // contents
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotificationRuleDBEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimeType(cursor.getInt(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeek(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setPlayType(cursor.getInt(offset + 7));
        entity.setPlayStatus(cursor.getInt(offset + 8));
        entity.setCleanOld(cursor.getShort(offset + 9) != 0);
        entity.setColor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBackground(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnderline(cursor.getShort(offset + 12) != 0);
        entity.setItalic(cursor.getShort(offset + 13) != 0);
        entity.setBold(cursor.getShort(offset + 14) != 0);
        entity.setSize(cursor.getInt(offset + 15));
        entity.setAlignment(cursor.getInt(offset + 16));
        entity.setFont(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setGravity(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRollDirection(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setContents(cursor.isNull(offset + 20) ? null : contentsConverter.convertToEntityProperty(cursor.getString(offset + 20)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NotificationRuleDBEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(NotificationRuleDBEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotificationRuleDBEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
